{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "56b45e41-274d-4695-b718-ec2703ed5ba8",
   "metadata": {},
   "source": [
    "# 1.Understanding the Data:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a316f235",
   "metadata": {},
   "source": [
    "Import necessary libraries (e.g., pandas, matplotlib, seaborn).<br>\n",
    "Load the COVID-19 dataset.<br>\n",
    "Display basic information about the dataset (e.g., data types, missing values).<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "09fd4d1b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SNo</th>\n",
       "      <th>ObservationDate</th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Last Update</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Anhui</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Chongqing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Fujian</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Gansu</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306424</th>\n",
       "      <td>306425</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zaporizhia Oblast</td>\n",
       "      <td>Ukraine</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>102641.0</td>\n",
       "      <td>2335.0</td>\n",
       "      <td>95289.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306425</th>\n",
       "      <td>306426</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zeeland</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>29147.0</td>\n",
       "      <td>245.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306426</th>\n",
       "      <td>306427</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zhejiang</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>1364.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1324.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306427</th>\n",
       "      <td>306428</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zhytomyr Oblast</td>\n",
       "      <td>Ukraine</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>87550.0</td>\n",
       "      <td>1738.0</td>\n",
       "      <td>83790.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306428</th>\n",
       "      <td>306429</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zuid-Holland</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>391559.0</td>\n",
       "      <td>4252.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>306429 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           SNo ObservationDate     Province/State  Country/Region  \\\n",
       "0            1      01/22/2020              Anhui  Mainland China   \n",
       "1            2      01/22/2020            Beijing  Mainland China   \n",
       "2            3      01/22/2020          Chongqing  Mainland China   \n",
       "3            4      01/22/2020             Fujian  Mainland China   \n",
       "4            5      01/22/2020              Gansu  Mainland China   \n",
       "...        ...             ...                ...             ...   \n",
       "306424  306425      05/29/2021  Zaporizhia Oblast         Ukraine   \n",
       "306425  306426      05/29/2021            Zeeland     Netherlands   \n",
       "306426  306427      05/29/2021           Zhejiang  Mainland China   \n",
       "306427  306428      05/29/2021    Zhytomyr Oblast         Ukraine   \n",
       "306428  306429      05/29/2021       Zuid-Holland     Netherlands   \n",
       "\n",
       "                Last Update  Confirmed  Deaths  Recovered  \n",
       "0           1/22/2020 17:00        1.0     0.0        0.0  \n",
       "1           1/22/2020 17:00       14.0     0.0        0.0  \n",
       "2           1/22/2020 17:00        6.0     0.0        0.0  \n",
       "3           1/22/2020 17:00        1.0     0.0        0.0  \n",
       "4           1/22/2020 17:00        0.0     0.0        0.0  \n",
       "...                     ...        ...     ...        ...  \n",
       "306424  2021-05-30 04:20:55   102641.0  2335.0    95289.0  \n",
       "306425  2021-05-30 04:20:55    29147.0   245.0        0.0  \n",
       "306426  2021-05-30 04:20:55     1364.0     1.0     1324.0  \n",
       "306427  2021-05-30 04:20:55    87550.0  1738.0    83790.0  \n",
       "306428  2021-05-30 04:20:55   391559.0  4252.0        0.0  \n",
       "\n",
       "[306429 rows x 8 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load required libraries/modules\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Load the dataset\n",
    "import pandas as pd\n",
    "df=pd.read_csv(r\"C:\\Users\\hp\\Documents\\Rutuja11\\covid_19_data.csv\")\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "db86fb51-3ce7-47c5-a14f-dae07a705a68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 306429 entries, 0 to 306428\n",
      "Data columns (total 8 columns):\n",
      " #   Column           Non-Null Count   Dtype  \n",
      "---  ------           --------------   -----  \n",
      " 0   SNo              306429 non-null  int64  \n",
      " 1   ObservationDate  306429 non-null  object \n",
      " 2   Province/State   228326 non-null  object \n",
      " 3   Country/Region   306429 non-null  object \n",
      " 4   Last Update      306429 non-null  object \n",
      " 5   Confirmed        306429 non-null  float64\n",
      " 6   Deaths           306429 non-null  float64\n",
      " 7   Recovered        306429 non-null  float64\n",
      "dtypes: float64(3), int64(1), object(4)\n",
      "memory usage: 18.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Display basic information about the dataset\n",
    "df.info()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5189d6f0",
   "metadata": {},
   "source": [
    "# 2. Data Cleaning:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78d8dd02",
   "metadata": {},
   "outputs": [],
   "source": [
    "Handle missing values.\n",
    "Convert data types if necessary.\n",
    "Check for duplicates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "151f56ca-a73f-4388-8b46-399aa84407ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SNo</th>\n",
       "      <th>ObservationDate</th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Last Update</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Anhui</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Chongqing</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Fujian</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>01/22/2020</td>\n",
       "      <td>Gansu</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>1/22/2020 17:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306424</th>\n",
       "      <td>306425</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zaporizhia Oblast</td>\n",
       "      <td>Ukraine</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>102641.0</td>\n",
       "      <td>2335.0</td>\n",
       "      <td>95289.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306425</th>\n",
       "      <td>306426</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zeeland</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>29147.0</td>\n",
       "      <td>245.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306426</th>\n",
       "      <td>306427</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zhejiang</td>\n",
       "      <td>Mainland China</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>1364.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1324.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306427</th>\n",
       "      <td>306428</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zhytomyr Oblast</td>\n",
       "      <td>Ukraine</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>87550.0</td>\n",
       "      <td>1738.0</td>\n",
       "      <td>83790.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306428</th>\n",
       "      <td>306429</td>\n",
       "      <td>05/29/2021</td>\n",
       "      <td>Zuid-Holland</td>\n",
       "      <td>Netherlands</td>\n",
       "      <td>2021-05-30 04:20:55</td>\n",
       "      <td>391559.0</td>\n",
       "      <td>4252.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>306429 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           SNo ObservationDate     Province/State  Country/Region  \\\n",
       "0            1      01/22/2020              Anhui  Mainland China   \n",
       "1            2      01/22/2020            Beijing  Mainland China   \n",
       "2            3      01/22/2020          Chongqing  Mainland China   \n",
       "3            4      01/22/2020             Fujian  Mainland China   \n",
       "4            5      01/22/2020              Gansu  Mainland China   \n",
       "...        ...             ...                ...             ...   \n",
       "306424  306425      05/29/2021  Zaporizhia Oblast         Ukraine   \n",
       "306425  306426      05/29/2021            Zeeland     Netherlands   \n",
       "306426  306427      05/29/2021           Zhejiang  Mainland China   \n",
       "306427  306428      05/29/2021    Zhytomyr Oblast         Ukraine   \n",
       "306428  306429      05/29/2021       Zuid-Holland     Netherlands   \n",
       "\n",
       "                Last Update  Confirmed  Deaths  Recovered  \n",
       "0           1/22/2020 17:00        1.0     0.0        0.0  \n",
       "1           1/22/2020 17:00       14.0     0.0        0.0  \n",
       "2           1/22/2020 17:00        6.0     0.0        0.0  \n",
       "3           1/22/2020 17:00        1.0     0.0        0.0  \n",
       "4           1/22/2020 17:00        0.0     0.0        0.0  \n",
       "...                     ...        ...     ...        ...  \n",
       "306424  2021-05-30 04:20:55   102641.0  2335.0    95289.0  \n",
       "306425  2021-05-30 04:20:55    29147.0   245.0        0.0  \n",
       "306426  2021-05-30 04:20:55     1364.0     1.0     1324.0  \n",
       "306427  2021-05-30 04:20:55    87550.0  1738.0    83790.0  \n",
       "306428  2021-05-30 04:20:55   391559.0  4252.0        0.0  \n",
       "\n",
       "[306429 rows x 8 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Handle missing values\n",
    "for i in df:\n",
    "    if df[i].dtype=='object':\n",
    "        a=df[i].mode()[0]\n",
    "        df[i]=df[i].fillna(a)\n",
    "df.isna().sum()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "826f034a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        2020-01-22\n",
       "1        2020-01-22\n",
       "2        2020-01-22\n",
       "3        2020-01-22\n",
       "4        2020-01-22\n",
       "            ...    \n",
       "306424   2021-05-29\n",
       "306425   2021-05-29\n",
       "306426   2021-05-29\n",
       "306427   2021-05-29\n",
       "306428   2021-05-29\n",
       "Name: ObservationDate, Length: 306429, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert data types if necessary ( ObservationDate    datetime64[ns]) change to datetime\n",
    "df['ObservationDate'] = pd.to_datetime(df['ObservationDate'])            \n",
    "df['ObservationDate']\n",
    "\n",
    "\n",
    "\n",
    "#df['ObservationDate'] = pd.to_datetime(df['ObservationDate']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9bbd223b-c888-4728-a573-fc031f728429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicates: 0\n"
     ]
    }
   ],
   "source": [
    "# Check for duplicates\n",
    "# print(\"Number of duplicates:\", df.duplicated().sum())\n",
    "\n",
    "print(\"Number of duplicates:\", df.duplicated().sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "004e0e00",
   "metadata": {},
   "source": [
    "# 3. Descriptive Statistics:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbed810e",
   "metadata": {},
   "source": [
    "Generate descriptive statistics (mean, median, min, max) for numeric columns.<br>\n",
    "Explore summary statistics for categorical columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "26023638-6312-46ab-813c-6fae6b260246",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SNo</th>\n",
       "      <th>ObservationDate</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>306429.000000</td>\n",
       "      <td>306429</td>\n",
       "      <td>3.064290e+05</td>\n",
       "      <td>306429.000000</td>\n",
       "      <td>3.064290e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>153215.000000</td>\n",
       "      <td>2020-11-06 01:54:54.146441728</td>\n",
       "      <td>8.567091e+04</td>\n",
       "      <td>2036.403268</td>\n",
       "      <td>5.042029e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2020-01-22 00:00:00</td>\n",
       "      <td>-3.028440e+05</td>\n",
       "      <td>-178.000000</td>\n",
       "      <td>-8.544050e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>76608.000000</td>\n",
       "      <td>2020-07-30 00:00:00</td>\n",
       "      <td>1.042000e+03</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1.100000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>153215.000000</td>\n",
       "      <td>2020-11-10 00:00:00</td>\n",
       "      <td>1.037500e+04</td>\n",
       "      <td>192.000000</td>\n",
       "      <td>1.751000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>229822.000000</td>\n",
       "      <td>2021-02-18 00:00:00</td>\n",
       "      <td>5.075200e+04</td>\n",
       "      <td>1322.000000</td>\n",
       "      <td>2.027000e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>306429.000000</td>\n",
       "      <td>2021-05-29 00:00:00</td>\n",
       "      <td>5.863138e+06</td>\n",
       "      <td>112385.000000</td>\n",
       "      <td>6.399531e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>88458.577156</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.775516e+05</td>\n",
       "      <td>6410.938048</td>\n",
       "      <td>2.015124e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 SNo                ObservationDate     Confirmed  \\\n",
       "count  306429.000000                         306429  3.064290e+05   \n",
       "mean   153215.000000  2020-11-06 01:54:54.146441728  8.567091e+04   \n",
       "min         1.000000            2020-01-22 00:00:00 -3.028440e+05   \n",
       "25%     76608.000000            2020-07-30 00:00:00  1.042000e+03   \n",
       "50%    153215.000000            2020-11-10 00:00:00  1.037500e+04   \n",
       "75%    229822.000000            2021-02-18 00:00:00  5.075200e+04   \n",
       "max    306429.000000            2021-05-29 00:00:00  5.863138e+06   \n",
       "std     88458.577156                            NaN  2.775516e+05   \n",
       "\n",
       "              Deaths     Recovered  \n",
       "count  306429.000000  3.064290e+05  \n",
       "mean     2036.403268  5.042029e+04  \n",
       "min      -178.000000 -8.544050e+05  \n",
       "25%        13.000000  1.100000e+01  \n",
       "50%       192.000000  1.751000e+03  \n",
       "75%      1322.000000  2.027000e+04  \n",
       "max    112385.000000  6.399531e+06  \n",
       "std      6410.938048  2.015124e+05  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Descriptive statistics\n",
    "\n",
    "df.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5d339094-d90e-40d9-b0ad-d119a05f3328",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count      306429\n",
      "unique        736\n",
      "top       Unknown\n",
      "freq        82226\n",
      "Name: Province/State, dtype: object\n",
      "count     306429\n",
      "unique       229\n",
      "top       Russia\n",
      "freq       30251\n",
      "Name: Country/Region, dtype: object\n",
      "count                  306429\n",
      "unique                   1905\n",
      "top       2021-04-02 15:13:53\n",
      "freq                   239885\n",
      "Name: Last Update, dtype: object\n",
      "count      306429\n",
      "unique        736\n",
      "top       Unknown\n",
      "freq        82226\n",
      "Name: Province/State, dtype: object\n",
      "count     306429\n",
      "unique       229\n",
      "top       Russia\n",
      "freq       30251\n",
      "Name: Country/Region, dtype: object\n",
      "count                  306429\n",
      "unique                   1905\n",
      "top       2021-04-02 15:13:53\n",
      "freq                   239885\n",
      "Name: Last Update, dtype: object\n",
      "Province/State\n",
      "Unknown                         82226\n",
      "Amazonas                         1109\n",
      "Diamond Princess cruise ship      924\n",
      "Grand Princess                    882\n",
      "Punjab                            708\n",
      "                                ...  \n",
      "Harrison County, KY                 1\n",
      "Queens County, NY                   1\n",
      "Johnson County, IA                  1\n",
      "Unassigned Location, VT             1\n",
      "Charlotte County, FL                1\n",
      "Name: count, Length: 736, dtype: int64\n",
      "Country/Region\n",
      "Russia                 30251\n",
      "US                     26740\n",
      "Japan                  18059\n",
      "Mainland China         15758\n",
      "India                  13182\n",
      "                       ...  \n",
      " Azerbaijan                1\n",
      "North Ireland              1\n",
      "Republic of Ireland        1\n",
      "Cape Verde                 1\n",
      "East Timor                 1\n",
      "Name: count, Length: 229, dtype: int64\n",
      "Last Update\n",
      "2021-04-02 15:13:53    239885\n",
      "3/8/20 5:31              1252\n",
      "2021-05-30 04:20:55       765\n",
      "2021-04-26 04:21:04       765\n",
      "2021-04-20 04:20:41       765\n",
      "                        ...  \n",
      "2020-03-10T10:33:02         1\n",
      "2020-02-18T01:33:01         1\n",
      "2020-03-10T01:33:02         1\n",
      "2020-03-10T07:33:03         1\n",
      "2020-02-04T03:03:07         1\n",
      "Name: count, Length: 1905, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Summary statistics for categorical columns\n",
    "cat=[]\n",
    "con=[]\n",
    "for i in df:\n",
    "    if df[i].dtype=='object':\n",
    "        cat.append(i)\n",
    "        \n",
    "    else:\n",
    "        con.append(i)\n",
    "        \n",
    "df.describe()\n",
    "\n",
    "\n",
    "for i in cat:\n",
    "    print(df[i].describe())\n",
    "\n",
    "for i in cat:\n",
    "    print(df[i].describe())\n",
    "\n",
    "for i in cat:\n",
    "    print(df[i].value_counts())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39872389",
   "metadata": {},
   "source": [
    "# 4. Time Series Analysis:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2e355d2",
   "metadata": {},
   "source": [
    "Analyze the trends in confirmed, deaths, and recovered cases over time.<br>\n",
    "Create time-based visualizations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a74a66fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ObservationDate</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-01-22</th>\n",
       "      <td>557.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-23</th>\n",
       "      <td>1097.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-24</th>\n",
       "      <td>941.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-25</th>\n",
       "      <td>1437.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-26</th>\n",
       "      <td>2118.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-25</th>\n",
       "      <td>167848207.0</td>\n",
       "      <td>3485788.0</td>\n",
       "      <td>104824935.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-26</th>\n",
       "      <td>168416423.0</td>\n",
       "      <td>3498544.0</td>\n",
       "      <td>105380748.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-27</th>\n",
       "      <td>168970791.0</td>\n",
       "      <td>3511297.0</td>\n",
       "      <td>106078106.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-28</th>\n",
       "      <td>169470725.0</td>\n",
       "      <td>3523117.0</td>\n",
       "      <td>106633069.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-05-29</th>\n",
       "      <td>169951560.0</td>\n",
       "      <td>3533619.0</td>\n",
       "      <td>107140669.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>494 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Confirmed     Deaths    Recovered\n",
       "ObservationDate                                     \n",
       "2020-01-22             557.0       17.0         30.0\n",
       "2020-01-23            1097.0       34.0         60.0\n",
       "2020-01-24             941.0       26.0         39.0\n",
       "2020-01-25            1437.0       42.0         42.0\n",
       "2020-01-26            2118.0       56.0         56.0\n",
       "...                      ...        ...          ...\n",
       "2021-05-25       167848207.0  3485788.0  104824935.0\n",
       "2021-05-26       168416423.0  3498544.0  105380748.0\n",
       "2021-05-27       168970791.0  3511297.0  106078106.0\n",
       "2021-05-28       169470725.0  3523117.0  106633069.0\n",
       "2021-05-29       169951560.0  3533619.0  107140669.0\n",
       "\n",
       "[494 rows x 3 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Time series analysis\n",
    "\n",
    "# groupby 'ObservationDate' and apply aggregation functions like sum on deaths,confirmed ,recovered \n",
    "# df_time = df.groupby('ObservationDate').agg({'Confirmed': 'sum', 'Deaths': 'sum', 'Recovered': 'sum'})\n",
    "df_time = df.groupby('ObservationDate').agg({'Confirmed': 'sum', 'Deaths': 'sum', 'Recovered': 'sum'})\n",
    "df_time\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f8687475-13e3-4512-b86e-5e78c3e6f916",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function seaborn.relational.lineplot(data=None, *, x=None, y=None, hue=None, size=None, style=None, units=None, weights=None, palette=None, hue_order=None, hue_norm=None, sizes=None, size_order=None, size_norm=None, dashes=True, markers=None, style_order=None, estimator='mean', errorbar=('ci', 95), n_boot=1000, seed=None, orient='x', sort=True, err_style='band', err_kws=None, legend='auto', ci='deprecated', ax=None, **kwargs)>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# syntax: \n",
    "#sns.lineplot(data=df_time, x='ObservationDate', y='Confirmed', label='Confirmed')\n",
    "\n",
    "#sns.lineplot(data=df_time, x='ObservationDate', y='Confirmed', label='Confirmed')\n",
    "sns.lineplot(data=df_time, x='ObservationDate', y='Confirmed', label='Confirmed')\n",
    "sns.lineplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78f86196-4b60-4da7-a1a6-d7c6d7847948",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a7d087b3",
   "metadata": {},
   "source": [
    "# 5. Geographical Analysis:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "647f69a1",
   "metadata": {},
   "source": [
    "Analyze the distribution of cases across different countries/regions.<br>\n",
    "Create geographical visualizations (e.g., world map)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "0def7145",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                 Confirmed    Deaths   Recovered\n",
      "Country/Region                                                  \n",
      " Azerbaijan                            1.0       0.0         0.0\n",
      "('St. Martin',)                        2.0       0.0         0.0\n",
      "Afghanistan                     17026442.0  669075.0  13464399.0\n",
      "Albania                         19768869.0  375955.0  13945256.0\n",
      "Algeria                         27684358.0  834464.0  18959299.0\n",
      "...                                    ...       ...         ...\n",
      "West Bank and Gaza              41819444.0  440378.0  37003116.0\n",
      "Yemen                             962066.0  237613.0    506523.0\n",
      "Zambia                          13493953.0  205990.0  12625626.0\n",
      "Zimbabwe                         6484581.0  237234.0   5594887.0\n",
      "occupied Palestinian territory        25.0       0.0         0.0\n",
      "\n",
      "[229 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# Geographical analysis\n",
    "# df_country = df.groupby('Country/Region').agg({'Confirmed': 'sum', 'Deaths': 'sum', 'Recovered': 'sum'}\n",
    "\n",
    "\n",
    "df_country = df.groupby('Country/Region').agg({'Confirmed': 'sum','Deaths': 'sum', 'Recovered': 'sum'})\n",
    "print(df_country)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "b63bd7e0-2dc0-43a6-b2ec-3f262b1922ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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u3TxxRcrLS1Ne/fu1QsvvKBFixZp3rx5x6lSAAAAHE/Og2j58uVVoUKFXz2fH3/8Uddcc42ys7OVkpKipk2bat68eerUqdNxqBIAAADHm/Mget999+nee+/VjBkzFB8ff8zzmTp16nGsCgAAACea8yA6YcIEbdy4UVWqVFFGRoYCgUDY8ytWrHBUGQAAAE4k50G0Z8+erksAAACAA86D6MiRI12XAAAAAAecB9GQ5cuXa+3atfI8T5mZmcrKynJdEgAAAE4g50F069atuvLKK7Vo0SKlpqbKzLR792516NBBL7zwgipVquS6RAAAAJwAzn/ic/DgwdqzZ4/WrFmjHTt2aOfOnfr888+1Z88e3XLLLa7LAwAAwAni/IjovHnztGDBAjVs2NAfl5mZqUcffVSdO3d2WBkAAABOJOdHRPPy8grdskmSAoFAod+dBwAAQNnhPIhecMEFGjJkiL7//nt/3Hfffadbb71VF154ocPKAAAAcCI5D6KTJk3S3r17lZGRobp166pevXqqXbu29u7dq3/84x+uywMAAMAJ4vwc0bS0NK1YsULz58/XunXrZGbKzMxUx44dXZcGAACAE8jZEdG3335bmZmZ2rNnjySpU6dOGjx4sG655Ra1bNlSjRo10rvvvuuqPAAAAJxgzoLoxIkTNXDgQCUnJxd6LiUlRTfccIMeeughB5UBAACgNDgLop999pkuuuiiIp/v3Lmzli9fXooVnVrOumOmzrpjpusyAADAKcxZEP3xxx8j3rYpJCYmRv/5z39KsSIAAACUJmdBtEaNGlq9enWRz69atUrVqlUrxYoAAABQmpwF0a5du+ree+/VgQMHCj33888/a+TIkerWrZuDygAAAFAanN2+acSIEZo1a5YaNGigm2++Waeffro8z9PatWv16KOP6tChQ7r77rtdlQcAAIATzFkQrVKlij744APdeOONGj58uMxMkuR5nrp06aLHHntMVapUcVUeAAAATjCnN7RPT0/X66+/rp07d2rDhg0yM9WvX1/ly5d3WRYAAABKgfNfVpKk8uXLq2XLlq7LAAAAQCly/lvzAAAAODURRAEAAOAEQRQAAABOEEQBAADgBEEUAAAAThBEAQAA4ARBFAAAAE4QRAEAAOAEQRQAAABOEEQBAADgBEEUAAAAThBEAQAA4ARBFAAAAE4QRAEAAOAEQRQA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mqa4+UeaR37Nb3m8yLZFLSf0uODrjPR6iqulqNqKWl5+Ra230OspWFP+7VTcfPPXEmldFLecgssr6nVFmvZIfShSbaF/i+pvJVn3JdmmJW2bv7aC0xQl/+souH0K9s38bQour6j3QP7XU3A5ISXps0W9rpL0g6JeT3F9NdK8ilpOUbWVpL8V9T4KKcm+JNL7tah+XZL3eFHbtLjaCi6nuFqPNO3RKGrbFtWHIimuvxX13i5J3ynJ50LBNkfz/i9qOQUV7A/5Hc16K8nnUP7XE3rezEr8WvDb4FkZ2Wrff/+9atSooQ8++ECtW7f2x99///16+umntW7dukJtRo0apdGjR5dmmQAA4ATZsmWLatas6boMHIUy89X8aaedpujo6EJHP7du3VroKGnI8OHDtXv3bn/YuXOnVq5cKUn64osvIv67ZcsWbdmypdhpjmdb2tCGNrShDW1oU7I21atXF04uZear+djYWJ111lmaP3++LrnkEn/8/Pnz1aNHj4htgsGggsFg2LioqMPZPCkpKeK/ycnJ/rRFTXM829KGNrShDW1oQ5sjt6lRo4b/GY6TR5kJopI0bNgwXXPNNWrRooVat26tKVOmaPPmzfrTn/7kujQAAAAUUKaC6BVXXKHt27drzJgxys7OVuPGjfX6668rPT3ddWkAAAAooEwFUUm66aabdNNNNx1z+2AwqJEjRyo5OTniv6Gv8oub5ni2pQ1taEMb2tCGNkduU/BUO5wcysxV8wAAADi5cFYvAAAAnCCIAgAAwIlSD6Lbt29X5cqVtWnTpkLPeZ6nOXPmFBpvZvrjH/+oChUqyPM8/16fR5KRkaGJEydKkhYtWiTP87Rr1y5J0l/+8pewxwWflw7f8L558+aSpPbt26tVq1b+4/zat2+voUOHRpyuVatW8jxPnufp9NNPl+d5ev311+V5npo0aeJPt2nTJnmepz59+igjI0OnnXaaKlWq5LedMmWKPM9TnTp1/HXQv39/JSYm+tMEg0ElJycrEAj4y42JiVGLFi385cXExITd3qqg/v37q2fPnv5rCQQC/vzPP/98RUVF+es0tH4yMjJ08803+9N5nqe//OUvat68ud5++23/ccill17qTzdnzhz17NlTnuf5938LPe7Zs6e/XapUqaLKlSsrNTVV0uG+Ehsbq4suuihsubt27fLXZaiftG/fXjVr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UJ+fMmWKSYfvBHOkfno0+vXrZz169PD7QKiPbdiw4ZjmV7B9Ue+DY5V/P3Gsxo4dazVq1PjV+41TSUn3W5GUehA1M5s4caJt3rz5iNPNmDHD3n33Xfv6669t9uzZVqNGDevTp4+Zma1YscKee+4527Bhgy1fvtx69OhhKSkp/mHmYzF06FAbN26cLViwwO644w7/dlD557l//36bMGGCff7557Z27Vq79957TVLYLazMDt/S4OOPP7akpCR77rnn/PHHWveKFSts6tSpVrVqVXv33XetR48elpycbD179rSEhAQ7cOCA7d+/3z7//HNr1KiRpaSkFLmO87+GBx54wD8qPGPGjCJrOta6d+3aZffff7/98ssvYePz74R37dplgwYNsmeeeSZs/snJybZ69WobNmyY1apVy3Jzc23//v321ltvmed59sEHHxxzEJ01a5a99dZb9s0339j8+fMtMzPT/6m8bt262cGDB+3f//63XXXVVXbuuedGnMfRBNH8/eGGG26IGETffPNNmzdvXti4xx9/3NatW1fkfEPb8rrrrrPbb7+9yP4YqZ7169dbhw4drHfv3nbo0CHbtGmTDRgwwOLj461evXph771q1apZ+/btLRgM+ttt4cKF9uqrr9qSJUtMkjVv3tzS0tLsmWeesejoaIuOjrZAIGDjx4+3unXrWnR0tG3atMnmz59vcXFx9tZbb5lZ5CCanJzsT/fyyy/b3XffbZ7n2YIFC+y2226zZs2aWc2aNf2f6Lvrrrvsu+++8/vKxo0b7aqrrrKWLVva3/72N0tISLAdO3aUaFsVt54K2rRpk02ZMsW+/PJLW7Vqlf3xj3+0QCBgX3zxRZHz3LVrV6F1YGYl6nP5hcLIrFmz/H58xhlnWMWKFS0xMdHWrl1rt9xyi0mHb3wdSXp6uo0fP96/L+GsWbNs+PDhJsmeeOKJQvu4Rx991JYtW2YbN260mTNnWkpKivXp08deffVV+/rrr/2fWK5cubIdPHiwyNpD751QHxo8eLDFxcVZkyZNrGbNmnbFFVccdVCLVFvoIEBR63zv3r22bNkyq1Klik2ZMqXY+T/44IO2cuVKW79+vT3yyCMWCATsiSeeOKp6UlJSjimI5ubm2po1ayw9Pd0eeOABf9tPmjTJrr/+eqtSpYplZWVZuXLl7MorryzRPIuT/zOiZcuWVrNm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42rVqmnr1q1HbJeenq5KlSqFjRs4cKDeeustfffdd5IOH0nt37+//1rMTP/617/CvpaXpD59+mjlypX68MMPdfnll+u6665Tr169JElffPGFDhw4oE6dOikxMdEfZs6cqY0bN0qSvvzyS7Vs2TJsnmeffXax9a9du1Zt2rQJG9emTZtC6y//+klISFBSUlKJ1g8A/JZxsRKAiOrXry/P87R27dpC53iGmFnEoJp/fFRUlB9qQ3Jzcwu1KXiRked5ysvLO2KdkU4byMrKUrNmzTRz5kx16dJFq1ev1r/+9S//+WXLlungwYNq27ZtWLuUlBTVq1dPkvTMM8+oUaNGmjp1qq6//nq/ltdee001atQIaxcMBgu97pCCrz2SSG0KjjvW9QMAv2UcEQUQUYUKFdSlSxc9+uij2r9/f6Hnd+3apczMTG3evFlbtmzxx3/xxRfavXu3GjZsKEmqVKmSsrOzw9quXLnyqOsJBAI6dOhQiacfMGCApk2bpqeeekodO3YMO2r76quv6ne/+52io6OLXd5dd92lESNG6KefflJmZqaCwaA2b96sevXqhQ2heZ9xxhlh569K0ieffFJsnQ0bNtR7770XNu6DDz7w1x8AlGUEUQBFeuyxx3To0CGdffbZeuWVV7R+/XqtXbtWjzzyiFq3bq2OHTuqadOm6tOnj1asWKFly5apb9++ateunVq0aCFJuuCCC/TJJ59o5syZWr9+vUaOHKnPP//8qGvJyMjQwoUL9cMPP2jnzp1HnL5Pnz767rvv9MQTT+i6664Le67gbZuK0rt3b3mep8cee0xJSUm6/fbbdeutt2rGjBnauHGjPv30Uz366KOaMWOGJOmGG27QunXrdOedd+qrr77SSy+9pOnTp0sq+hSHO+64Q9OnT9f//u//av369XrooYc0a9Ys3X777UesDwBOdgRRAEWqXbu2VqxYoQ4dOui2225T48aN1alTJy1cuFCTJ0/2bzJfvnx5nX/++erYsaPq1KmjF1980Z9Hly5ddM899+jPf/6zWrZsqb1794bdRqmkJkyYoPnz5ystLU1ZWVlHnD45OVm9evVSYmJi2KkFGzdu1IYNG9SlS5cjziM2NlY333yz/vrXv2rfvn267777dO+992rcuHFq2LChunTpon/961+qXbu2v75efvllzZo1S02bNtXkyZP9q+ZDX98X1LNnTz388MN68MEH1ahRIz3++OOaNm1a2O2tAKCs8qwkJzABwEmoU6dOatiwoR555BF/3EMPPaQFCxbo9ddfL5Ua7r//fv3v//5v2OkLAIDDuFgJQJmzY8cOvfXWW3r77bc1adKksOdq1qyp4cOHn7BlP/bYY2rZsqUqVqyo999/Xw8++KBuvvnmE7Y8ADiZEUQBlDlnnnmmdu7cqfHjx+v0008Pe+7yyy8/octev369xo4dqx07dqhWrVq67bbbTmjwBYCTGV/NAwAAwAkuVgIAAIATBFEAAAA4QRAFAACAEwRRAAAAOEEQBQAAgBMEUQAAADhBEAUAAIATBFEAAAA4QRAFAACAE/8PN30JJ0e2c9gAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot geographical data\n",
    "# sns.barplot(x=df_country.index, y='Confirmed', data=df_country)\n",
    "sns.barplot(x=df_country.index, y='Confirmed', data=df_country)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0271decc",
   "metadata": {},
   "source": [
    "# 6. Correlation Analysis:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74cf06f2",
   "metadata": {},
   "source": [
    "Examine the correlation between different numeric variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a3dd2c7d-2052-4688-bf67-5b9319f60b14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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kJAQCCEAFD17uXv37li1alWpj1kkIiKiqqnciw65ublhx44dyMjIwPXr1yGEQIMGDWBnZ1cR8REREVW66lLel4peKxACgJ2dHdq0aSNlLERERFVCdZn4JxV5DYoQERFRMXpXBoiIiF5UHCYgIiKSObklAxwmICIikjlWBoiIiHTIrTLAZICIiEiH3JIBDhMQERHJHCsDREREOuS2zgCTASIiIh1yGyZgMkBERKRDbskA5wwQERHJHCsDREREOuRWGWAyQEREpENuyQCHCYiIiGSOlQEiIiIdQmaVASYDREREOuS2zgCHCYiIiGSOlQEiIiIdcptAyGSAiIhIh9zmDHCYgIiISOZYGSAiItLBYQIiIiKZk9swAZMBIiIiHawMGMjYO36GDoGqkHV1jxk6BKpCuu95aOgQiF5oVSYZICIiqiqEMHQElYvJABERkQ6uQEhERESywsoAERGRDt5NQEREJHNyu5uAwwREREQyx8oAERGRDt5NQEREJHNymzPAYQIiIiKZY2WAiIhIh9wqA0wGiIiIdMjtbgImA0RERDrkNoGQcwaIiIhkjpUBIiIiHZwzQEREJHNySwY4TEBERCRzrAwQERHpkNn8QSYDREREujhMQERERLLCygAREZEumY0TMBkgIiLSIbdhAiYDREREOrgCIREREckKKwNEREQ6OExAREQkdzJLBjhMQEREJHOsDBAREemQ2wRCJgNERES6ZJYMcJiAiIhI5lgZICIi0sG7CYiIiOSOwwREREQkJ0wGiIiIdAihkGwrr1WrVsHDwwNmZmZo1aoVDh8+/I/7b9q0CS1atICFhQWcnZ3xzjvvID09vVznZDJARESkS0i4lcOWLVswZcoUzJo1C2fPnkXHjh3Rs2dPJCQklLj/kSNHMGLECIwaNQrR0dH46aefcOrUKYwePbpc52UyQEREVIxCwq3slixZglGjRmH06NHw9vbGsmXL4OrqitWrV5e4/4kTJ+Du7o6goCB4eHjglVdewbhx43D69OlynZfJABERUQXKzc1Fdna21pabm1tsv7y8PERFRSEgIECrPSAgAMeOHSuxbz8/P9y5cwc7duyAEAJ3797Fzz//jNdff71cMTIZICIi0iXhMEFoaChsbGy0ttDQ0GKnTEtLQ2FhIRwdHbXaHR0dkZKSUmKYfn5+2LRpEwYNGgRTU1M4OTnB1tYW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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correlation analysis between confirmed,deaths and recovered\n",
    "#plt.scatter(df['Confirmed'],['Deaths'],['Recovered])\n",
    "\n",
    "\n",
    "df.columns\n",
    "xyz=df[['Confirmed','Deaths','Recovered']].corr()\n",
    "sns.heatmap(xyz,annot=True,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "cda0d851-d84f-4c6d-bffd-090c9847e3ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Confirmed</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.888416</td>\n",
       "      <td>0.633479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Deaths</th>\n",
       "      <td>0.888416</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.538416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recovered</th>\n",
       "      <td>0.633479</td>\n",
       "      <td>0.538416</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Confirmed    Deaths  Recovered\n",
       "Confirmed   1.000000  0.888416   0.633479\n",
       "Deaths      0.888416  1.000000   0.538416\n",
       "Recovered   0.633479  0.538416   1.000000"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df[['Confirmed','Deaths','Recovered']].corr()\n",
    "\n",
    "correlation=df[['Confirmed','Deaths','Recovered']].corr()\n",
    "correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "48a31755-562f-4ade-8a4e-6c21278b71ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Confirmed', 'Deaths', 'Recovered'], dtype='object')"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlation.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65fc64e2-a40e-4795-b42b-15f5478a8fd0",
   "metadata": {},
   "source": [
    "# 7.Advanced Analysis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "065c461b-94b4-4094-bad2-b02688ddba30",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the total number of confirmed cases, deaths, and recoveries for each country/region.\n",
    "\n",
    "total_confirmed=df ['Confirmed'].groupby(by=df['Country/Region']).sum()\n",
    "total_recovered=df ['Recovered'].groupby(by=df['Country/Region']).sum()\n",
    "total_deaths=df['Deaths'].groupby(by=df['Country/Region']).sum()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6825f26e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify the countries/regions with the highest number of confirmed cases, deaths, and recoveries.\n",
    "wx=df.sort_values(by='Confirmed',ascending=False)\n",
    "high_conf=wx.head(1)\n",
    "xy=df.sort_values(by='Deaths',ascending=False)\n",
    "high_death=xy.head(1)\n",
    "yz=df.sort_values(by='Recovered',ascending=False)\n",
    "high_recov=yz.head(1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4c8c7d4b-0ce5-431d-bf99-34fb0b3ae863",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the distribution of deaths using bar chart \n",
    "\n",
    "plt.hist(df['Deaths'],bins=10)\n",
    "plt.title('Distribution of Deaths')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "667d6e7b-e553-4fe2-a6ed-670f86d9b9fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Frequency'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Deaths'].value_counts().plot(kind='hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0eba1a98-9ae9-41df-b48a-580a7d74560b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
